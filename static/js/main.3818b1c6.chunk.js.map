{"version":3,"sources":["HallOfFame.js","Card.js","GuessCount.js","App.js","registerServiceWorker.js","index.js"],"names":["HallOfFame","_ref","entries","react_default","a","createElement","className","map","_ref2","date","guesses","id","player","key","FAKE_HOF","Card","card","feedback","onClick","concat","GuessCount","App","cards","_this","generateCards","result","candidates","shuffle","length","SIDE","pop","push","console","log","_this2","this","won","Date","getSeconds","src_GuessCount_0","index","src_Card_0","handleCardClick","src_HallOfFame_0","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"2RAgCeA,SA3BI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OACjBC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cACfH,EAAAC,EAAAC,cAAA,aAEIH,EAAQK,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,QAASC,EAAlBH,EAAkBG,GAAIC,EAAtBJ,EAAsBI,OAAtB,OACVT,EAAAC,EAAAC,cAAA,MAAIQ,IAAKF,GACPR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQG,GACtBN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWI,GACzBP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUM,UAuBvBE,EAAW,CACtB,CAAEH,GAAI,EAAGD,QAAS,GAAID,KAAM,aAAcG,OAAQ,QAClD,CAAED,GAAI,EAAGD,QAAS,GAAID,KAAM,aAAcG,OAAQ,SAClD,CAAED,GAAI,EAAGD,QAAS,GAAID,KAAM,aAAcG,OAAQ,UAClD,CAAED,GAAI,EAAGD,QAAS,GAAID,KAAM,aAAcG,OAAQ,yBCdrCG,eAnBF,SAAAd,GAAA,IAAGe,EAAHf,EAAGe,KAAMC,EAAThB,EAASgB,SAAUC,EAAnBjB,EAAmBiB,QAAnB,OACXf,EAAAC,EAAAC,cAAA,OAAKC,UAAS,QAAAa,OAAUF,GAAYC,QAAS,kBAAMA,EAAQF,KACzDb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UACA,WAAbW,EALe,SAKyBD,MCChCI,SANI,SAAAnB,GAAA,IAAGS,EAAHT,EAAGS,QAAH,OAAiBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWI,KC6C/CW,6MArCbC,MAAQC,EAAKC,+FAMX,IAHA,IAAMC,EAAS,GAETC,EAAaC,IARP,4NASLF,EAAOG,OAFDC,IAEgB,CAC3B,IAAMb,EAAOU,EAAWI,MACxBL,EAAOM,KAAKf,EAAMA,GAEpB,OAAOW,IAAQF,2CAGDT,GACdgB,QAAQC,IAAIjB,EAAM,4CAGX,IAAAkB,EAAAC,KACDC,GAAM,IAAIC,MAAOC,aAAe,IAAM,EAC5C,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACkC,EAAD,CAAY7B,QAAS,IACpByB,KAAKb,MAAMf,IAAI,SAACS,EAAMwB,GAAP,OACdrC,EAAAC,EAAAC,cAACoC,EAAD,CACEzB,KAAMA,EACNC,SAAS,UACTJ,IAAK2B,EACLtB,QAASgB,EAAKQ,oBAGjBN,GAAOjC,EAAAC,EAAAC,cAAA,uBACP+B,GAAOjC,EAAAC,EAAAC,cAACsC,EAAD,CAAYzC,QAASY,YAhCnB8B,aCFZC,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1B/B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB+B,MAAM,SAAAC,GACLjC,QAAQiC,MAAM,4CAA6CA,KCjEnEC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDehC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,mBAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAjC,OAAMqD,mBAAN,sBAEN3B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7BT,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBY,MAAM,WACLhC,QAAQC,IACN,mEAzDAmD,CAAwBhC,GAHxBD,EAAgBC,MC9B1BiC","file":"static/js/main.3818b1c6.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './HallOfFame.css'\r\n\r\nconst HallOfFame = ({ entries }) => (\r\n  <table className=\"hallOfFame\">\r\n    <tbody>\r\n      {\r\n        entries.map(({ date, guesses, id, player }) => (\r\n          <tr key={id}>\r\n            <td className=\"date\">{date}</td>\r\n            <td className=\"guesses\">{guesses}</td>\r\n            <td className=\"player\">{player}</td>\r\n          </tr>\r\n        ))\r\n      }\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nHallOfFame.propTypes = {\r\n  entries: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      date: PropTypes.string.isRequired,\r\n      guesses: PropTypes.number.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      player: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n}\r\n\r\nexport default HallOfFame\r\n\r\n// == Internal helpers ==============================================\r\n\r\nexport const FAKE_HOF = [\r\n  { id: 3, guesses: 18, date: '10/10/2017', player: 'Jane' },\r\n  { id: 2, guesses: 23, date: '11/10/2017', player: 'Kevin' },\r\n  { id: 1, guesses: 31, date: '06/10/2017', player: 'Louisa' },\r\n  { id: 0, guesses: 48, date: '14/10/2017', player: 'Marc' },\r\n]","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Card.css'\r\n\r\nconst HIDDEN_SYMBOL = '❓'\r\n\r\nconst Card = ({ card, feedback, onClick }) => (\r\n  <div className={`card ${feedback}`} onClick={() => onClick(card)}>\r\n    <span className=\"symbol\">\r\n      {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\r\n    </span>\r\n  </div>\r\n)\r\n\r\nCard.propTypes = {\r\n  card: PropTypes.string.isRequired,\r\n  feedback: PropTypes.oneOf([\r\n    'hidden',\r\n    'justMatched',\r\n    'justMismatched',\r\n    'visible',\r\n  ]).isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './GuessCount.css'\r\n\r\nconst GuessCount = ({ guesses }) => <div className=\"guesses\">{guesses}</div>\r\n\r\nGuessCount.propTypes = {\r\n  guesses: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default GuessCount","import React, { Component } from 'react'\nimport HallOfFame, { FAKE_HOF } from './HallOfFame'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\n\nconst SIDE = 6\nconst SYMBOLS = '😀🎉💖🎩🐶🐱🦄🐬🌍🌛🌞💫🍎🍌🍓🍐🍟🍿'\n\nclass App extends Component {\n  cards = this.generateCards()\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  handleCardClick(card) {\n    console.log(card, 'clicked')\n  }\n\n  render() {\n    const won = new Date().getSeconds() % 2 === 0\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={0} />\n        {this.cards.map((card, index) => (\n          <Card\n            card={card}\n            feedback=\"visible\"\n            key={index}\n            onClick={this.handleCardClick}\n          />\n        ))}\n        {won && <p>GAGNÉ !</p>}\n        {won && <HallOfFame entries={FAKE_HOF} />}\n      </div>\n    )\n  }\n}\n\nexport default App","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (!isLocalhost) {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        } else {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()"],"sourceRoot":""}